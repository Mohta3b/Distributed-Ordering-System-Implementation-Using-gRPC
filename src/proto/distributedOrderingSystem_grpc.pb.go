// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: distributedOrderingSystem.proto

package ordersystem

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OrderManagementClient is the client API for OrderManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderManagementClient interface {
	GetOrderServerStreaming(ctx context.Context, in *OrderRequest, opts ...grpc.CallOption) (OrderManagement_GetOrderServerStreamingClient, error)
	GetOrderBidirectional(ctx context.Context, opts ...grpc.CallOption) (OrderManagement_GetOrderBidirectionalClient, error)
}

type orderManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderManagementClient(cc grpc.ClientConnInterface) OrderManagementClient {
	return &orderManagementClient{cc}
}

func (c *orderManagementClient) GetOrderServerStreaming(ctx context.Context, in *OrderRequest, opts ...grpc.CallOption) (OrderManagement_GetOrderServerStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &OrderManagement_ServiceDesc.Streams[0], "/distributedOrderingSystem.OrderManagement/getOrderServerStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &orderManagementGetOrderServerStreamingClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OrderManagement_GetOrderServerStreamingClient interface {
	Recv() (*OrderResponse, error)
	grpc.ClientStream
}

type orderManagementGetOrderServerStreamingClient struct {
	grpc.ClientStream
}

func (x *orderManagementGetOrderServerStreamingClient) Recv() (*OrderResponse, error) {
	m := new(OrderResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *orderManagementClient) GetOrderBidirectional(ctx context.Context, opts ...grpc.CallOption) (OrderManagement_GetOrderBidirectionalClient, error) {
	stream, err := c.cc.NewStream(ctx, &OrderManagement_ServiceDesc.Streams[1], "/distributedOrderingSystem.OrderManagement/getOrderBidirectional", opts...)
	if err != nil {
		return nil, err
	}
	x := &orderManagementGetOrderBidirectionalClient{stream}
	return x, nil
}

type OrderManagement_GetOrderBidirectionalClient interface {
	Send(*OrderRequest) error
	Recv() (*OrderResponse, error)
	grpc.ClientStream
}

type orderManagementGetOrderBidirectionalClient struct {
	grpc.ClientStream
}

func (x *orderManagementGetOrderBidirectionalClient) Send(m *OrderRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *orderManagementGetOrderBidirectionalClient) Recv() (*OrderResponse, error) {
	m := new(OrderResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// OrderManagementServer is the server API for OrderManagement service.
// All implementations must embed UnimplementedOrderManagementServer
// for forward compatibility
type OrderManagementServer interface {
	GetOrderServerStreaming(*OrderRequest, OrderManagement_GetOrderServerStreamingServer) error
	GetOrderBidirectional(OrderManagement_GetOrderBidirectionalServer) error
	mustEmbedUnimplementedOrderManagementServer()
}

// UnimplementedOrderManagementServer must be embedded to have forward compatible implementations.
type UnimplementedOrderManagementServer struct {
}

func (UnimplementedOrderManagementServer) GetOrderServerStreaming(*OrderRequest, OrderManagement_GetOrderServerStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method GetOrderServerStreaming not implemented")
}
func (UnimplementedOrderManagementServer) GetOrderBidirectional(OrderManagement_GetOrderBidirectionalServer) error {
	return status.Errorf(codes.Unimplemented, "method GetOrderBidirectional not implemented")
}
func (UnimplementedOrderManagementServer) mustEmbedUnimplementedOrderManagementServer() {}

// UnsafeOrderManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderManagementServer will
// result in compilation errors.
type UnsafeOrderManagementServer interface {
	mustEmbedUnimplementedOrderManagementServer()
}

func RegisterOrderManagementServer(s grpc.ServiceRegistrar, srv OrderManagementServer) {
	s.RegisterService(&OrderManagement_ServiceDesc, srv)
}

func _OrderManagement_GetOrderServerStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(OrderRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OrderManagementServer).GetOrderServerStreaming(m, &orderManagementGetOrderServerStreamingServer{stream})
}

type OrderManagement_GetOrderServerStreamingServer interface {
	Send(*OrderResponse) error
	grpc.ServerStream
}

type orderManagementGetOrderServerStreamingServer struct {
	grpc.ServerStream
}

func (x *orderManagementGetOrderServerStreamingServer) Send(m *OrderResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _OrderManagement_GetOrderBidirectional_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OrderManagementServer).GetOrderBidirectional(&orderManagementGetOrderBidirectionalServer{stream})
}

type OrderManagement_GetOrderBidirectionalServer interface {
	Send(*OrderResponse) error
	Recv() (*OrderRequest, error)
	grpc.ServerStream
}

type orderManagementGetOrderBidirectionalServer struct {
	grpc.ServerStream
}

func (x *orderManagementGetOrderBidirectionalServer) Send(m *OrderResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *orderManagementGetOrderBidirectionalServer) Recv() (*OrderRequest, error) {
	m := new(OrderRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// OrderManagement_ServiceDesc is the grpc.ServiceDesc for OrderManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "distributedOrderingSystem.OrderManagement",
	HandlerType: (*OrderManagementServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "getOrderServerStreaming",
			Handler:       _OrderManagement_GetOrderServerStreaming_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "getOrderBidirectional",
			Handler:       _OrderManagement_GetOrderBidirectional_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "distributedOrderingSystem.proto",
}
